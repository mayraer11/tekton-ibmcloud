apiVersion: tekton.dev/v1beta1
kind: EventListener
metadata:
  name: eventlistener
spec:
  triggers:
    - binding:
        name: triggerbinding
      template:
        name: triggertemplate
---
apiVersion: tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: triggerbinding
---
apiVersion: tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: triggertemplate
spec:
  resourcetemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: pipelinerun-$(uid)-pvc2
      spec:
        resources:
          requests:
            storage:  5Gi
        volumeMode: Filesystem
        accessModes:
          - ReadWriteOnce
#PIPELINE RUN
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        name: pipelinerun-$(uid)
      spec:
        pipelineRef:
            name: pipeline
        workspaces:
          - name: pipeline-pvc
            persistentVolumeClaim:
              claimName: pipelinerun-$(uid)-pvc
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline
spec:
  workspaces:
  - name: pipeline-pvc
  tasks:
    - name: deploy-terraform-task
      taskRef:
        name: terraform-task
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc 
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: terraform-task
spec:
  params:
    - name: repository
      description: Repositorio GIT
  workspaces:
  - name: task-pvc
    mountPath: /workspace
  steps:
    - name: clone-repo
      image: alpine/git:v2.26.2
      workingDir: workspace
      env:
        - name: REPOSITORY
          valueFrom:
              configMapKeyRef:
                name: environment-properties
                key: repository
        - name: BRANCH
          valueFrom:
              configMapKeyRef:
                name: environment-properties
                key: branch
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          rm -rf app;          
          git clone -q -b $BRANCH $REPOSITORY;
    - name: terraform-plan
      image: ibmcom/pipeline-base-image:2.11
      workingDir: /workspace
      env:
        - name: WORKSPACE
          valueFrom:
              configMapKeyRef:
                name: environment-properties
                key: workspace
        - name: IBMCLOUD_API_KEY
          valueFrom:
            secretKeyRef:
              name: secure-properties
              key: ibmcloud-api-key
        - name: HOME
          value: "/root"
      script: |
        #!/bin/bash
    - name: terraform-apply
      image: ibmcom/pipeline-base-image:2.11
      workingDir: /workspace
      env:
        - name: WORKSPACE
          valueFrom:
              configMapKeyRef:
                name: environment-properties
                key: workspace
        - name: IBMCLOUD_API_KEY
          valueFrom:
            secretKeyRef:
              name: secure-properties
              key: ibmcloud-api-key
        - name: HOME
          value: "/root"
      script: |
        #!/bin/bash